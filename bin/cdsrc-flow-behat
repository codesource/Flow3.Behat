#!/usr/bin/env bash

# Do not change this variable !!
SCRIPT_DIR=$(cd "$( dirname "$(readlink -f $0)" )" && pwd )

# Calculate the base directory based on the location of the script.
BASEDIR=$(realpath "$SCRIPT_DIR/../../../../..")

# Temporary directory
TEMP_DIR=/tmp

# Behat executable path
BEHAT_BIN=$(readlink -f "$BASEDIR/bin/behat")

# Additional behat options
BEHAT_OPTIONS=

# Selenium executable path
SELENIUM_BIN=$(readlink -f "$BASEDIR/bin/selenium-server-standalone")

# Selenium port
SELENIUM_PORT=8889

# Port for the standalone HTTP server
HTTP_PORT=8888

# If set to 0 the DB will be left untouched, otherwise it will be recreated
WIPE_DB=0

# If set to 0 the standalone HTTP server will not be killed at the end of the tests.
KILL_HTTP_SERVER=1

# The Flow3 context to be used
USE_FLOW_CONTEXT=Development/Behat

# Flow command
FLOW_COMMAND="$BASEDIR/flow"

# Use this browser for tests
BROWSER=firefox

# Path to browser driver
BROWSER_DRIVER_PATH=/opt/webdriver/geckodriver

# Name of browser driver system variable
BROWSER_DRIVER_NAME=webdriver.gecko.driver

# Test files by config
TEST_FILES=()
CONFIG_FILES=()

# Print usage
function usage {
    BLUE="\033[0;34m"
    GREY="\033[1;30m"
    GREEN="\033[0;32m"
    NC="\033[1;37m"
    printf "
${BLUE}Usage:
  ${NC}$0 [options] [<paths>]

${BLUE}Arguments:
  ${GREEN}paths               ${NC}Optional path(s) where to search for behat configuration files or features/scenarios files
  ${GREEN}                    ${NC}You can add multiple configuration/feature/scenarios files
  ${GREEN}                    ${NC}('${GREY}behat --help${NC}' for more details)

${BLUE}Options
  ${GREEN}--behat-options     ${NC}Add behat options to call ('${GREY}behat --help${NC}' for more details)
  ${GREEN}--selenium-port     ${NC}Change Selenium standalone server listening port
  ${GREEN}--http-port         ${NC}Change HTTP standalone server listening port
  ${GREEN}--wipe-db           ${NC}Force database to reset his data
  ${GREEN}--keep-http-server  ${NC}Force HTTP server to stay alive after tests
  ${GREEN}--browser           ${NC}Use this browser for tests (firefox, chrome, safari, ...)
  ${GREEN}--browser-driver    ${NC}Path to WebDriver for the selected browser
  ${GREEN}--help              ${NC}Display this help message

"
    exit 0
}

# Parse options
REMAINING_PARAMETERS=
for i in "$@"; do
    case "$i" in
        --behat-options=*)
            BEHAT_OPTIONS="${i#*=}"
            ;;
        --selenium-port=*)
            SELENIUM_PORT="${i#*=}"
            ;;
        --http-port=*)
            HTTP_PORT="${i#*=}"
            ;;
        --wipe-db)
            WIPE_DB=1
            ;;
        --keep-http-server)
            KILL_HTTP_SERVER=0
            ;;
        --browser=*)
            BROWSER="${i#*=}"
            case $BROWSER in
                firefox)
                    BROWSER_DRIVER_NAME=webdriver.gecko.driver
                    ;;
                *chrome*)
                    BROWSER_DRIVER_NAME=webdriver.chrome.driver
                    ;;
                *)
                    echo "Browser not supported"
                    usage
                    ;;
            esac
            ;;
        --browser-driver=*)
            BROWSER_DRIVER_PATH="${i#*=}"
            ;;
        --help|--*)
            usage
            ;;
        *)
            REMAINING_PARAMETERS="$REMAINING_PARAMETERS \"$i\""
            ;;
    esac
    shift
done

# Make sure that defined sub context have a settings file
if [ ! -f "$BASEDIR/Configuration/$USE_FLOW_CONTEXT/Settings.yaml" ] ; then
    echo "Make sure to set a specific 'Settings.yaml' for '$USE_FLOW_CONTEXT' context";
    exit 1
fi

CALLS_PARAMETER=$(php -f "$SCRIPT_DIR/ParameterBuilder.php" "${REMAINING_PARAMETERS}")

if [ -n "$CALLS_PARAMETER" ]; then

    # Wipe the DB if needed
    if [ ${WIPE_DB} -ne 0 ]; then
        echo "--- Recreating the DB"
        FLOW_CONTEXT="$USE_FLOW_CONTEXT" "$FLOW_COMMAND" doctrine:migrate --version=0 &> /dev/null
        if [ $? -ne 0 ]; then
            echo "Unable to clear the database, run 'FLOW_CONTEXT=$USE_FLOW_CONTEXT $FLOW_COMMAND doctrine:migrate --version=0' for more detail."
            exit 1
        fi
        FLOW_CONTEXT="$USE_FLOW_CONTEXT" "$FLOW_COMMAND" doctrine:migrate &> /dev/null
        if [ $? -ne 0 ]; then
            echo "Unable to create the schema of the database, run 'FLOW_CONTEXT=$USE_FLOW_CONTEXT $FLOW_COMMAND doctrine:migrate' for more detail."
            exit 1
        fi
    fi

    # Start the php internal server
    echo "--- Starting HTTP standalone server on port $HTTP_PORT"
    HTTP_PID=$(lsof -ti tcp:${HTTP_PORT} -stcp:LISTEN)
    if [[ -n $HTTP_PID ]] ; then
        echo "Unable to start HTTP server, $HTTP_PORT port is already used by $HTTP_PID!";
        exit 1;
    fi
    FLOW_CONTEXT="$USE_FLOW_CONTEXT" "$FLOW_COMMAND" server:run --host=127.0.0.1 --port="$HTTP_PORT" &> /dev/null &
    # Give time to HTTP server to start
    sleep 1
    HTTP_PID=$(lsof -ti tcp:${HTTP_PORT} -stcp:LISTEN)
    if [ -z ${HTTP_PID} ]; then
        sleep 3
        HTTP_PID=$(lsof -ti tcp:${HTTP_PORT} -stcp:LISTEN)
    fi
    echo "--- Server PID: $HTTP_PID"
    if [ -z ${HTTP_PID} ]; then
        echo "Unable start HTTP SERVER, run 'FLOW_CONTEXT=$USE_FLOW_CONTEXT $FLOW_COMMAND server:run --host=127.0.0.1 --port=$HTTP_PORT' for more detail."
        exit 1
    fi

    # Start selenium server
    echo "--- Starting Selenium standalone server on port $SELENIUM_PORT"
    (java -jar -D"$BROWSER_DRIVER_NAME"="$BROWSER_DRIVER_PATH" "$SELENIUM_BIN.jar" -port "$SELENIUM_PORT"  &>/dev/null) &
    SELENIUM_PID=$!
    echo "--- Selenium PID: $SELENIUM_PID"

    # Let servers time to load
    sleep 2;
    if [ -z $(lsof -ti tcp:${SELENIUM_PORT} -stcp:LISTEN) ]; then
        echo "Unable start HTTP SERVER, run 'java -jar -D$BROWSER_DRIVER_NAME=$BROWSER_DRIVER_PATH $SELENIUM_BIN.jar -port $SELENIUM_PORT' for more detail."
        # Kill HTTP server if needed
        if [ ${KILL_HTTP_SERVER} -ne 0 ]; then
            # Make sure to have the right PID
            HTTP_PID=$(lsof -ti tcp:${HTTP_PORT} -stcp:LISTEN)
            kill -9 "$HTTP_PID" &> /dev/null
            echo "--- Killing Server PID: $HTTP_PID"
        fi
        exit 1
    fi

    # Build custom behat config file
    export BEHAT_PARAMS=$(php -r "echo json_encode(array(
        'formatters' => array(
            'pretty' => array(
                '~',
            ),
        ),
        'translation' => array(
            'locale' => 'en',
        ),
        'extensions' => array(
            'Behat\MinkExtension' => array(
                'base_url' => 'http://127.0.0.1:$HTTP_PORT',
                'sessions' => array(
                    'default' => array(
                        'selenium2' => array(
                            'wd_host' => 'http://127.0.0.1:$SELENIUM_PORT/wd/hub',
                            'browser' => '$BROWSER',
                        ),
                    ),
                ),
            ),
        ),
    ));");

    # Run the tests config file by config file
    while read -r CALL_PARAMETER; do
        "$BEHAT_BIN" ${BEHAT_OPTIONS} ${CALL_PARAMETER}
        EXIT_STATUS=$?
        if [ ${EXIT_STATUS} -ne 0 ]; then
            break
        fi
    done <<< "$CALLS_PARAMETER"


    # Kill HTTP server if needed
    if [ ${KILL_HTTP_SERVER} -ne 0 ]; then
        # Make sure to have the right PID
        HTTP_PID=$(lsof -ti tcp:${HTTP_PORT} -stcp:LISTEN)
        kill -9 "$HTTP_PID" &> /dev/null
        echo "--- Killing Server PID: $HTTP_PID"
    fi

    # Kill Selenium server
    kill -9 "$SELENIUM_PID" &> /dev/null
    echo "--- Killing Selenium PID: $SELENIUM_PID"

    exit "$EXIT_STATUS"
fi

exit 128